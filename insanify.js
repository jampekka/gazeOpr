// Generated by LiveScript 1.3.1
(function(){
  var ref$, map, fold, cheerio, rw, P, LiveScript, browserify, StringStream, manglers, insanify, sane;
  ref$ = require("prelude-ls"), map = ref$.map, fold = ref$.fold;
  cheerio = require('cheerio');
  rw = require('rw');
  P = require('bluebird');
  LiveScript = require('LiveScript');
  browserify = require('browserify');
  StringStream = require("string-stream").StringStream;
  manglers = {
    ls: function(data, opts){
      var $, i$, ref$, len$, e;
      $ = cheerio.load(data);
      for (i$ = 0, len$ = (ref$ = map($, $("script[type=livescript]"))).length; i$ < len$; ++i$) {
        e = ref$[i$];
        e.html(LiveScript.compile(e.html()));
        e.attr('type', "browserifyjs");
      }
      return $.html();
    },
    browserify: function(data, arg$){
      var basedir, $, i$, ref$, len$, e, insane;
      basedir = (arg$ != null
        ? arg$
        : {}).basedir;
      $ = cheerio.load(data);
      for (i$ = 0, len$ = (ref$ = $("script[type=browserifyjs]").map($)).length; i$ < len$; ++i$) {
        e = ref$[i$];
        StringStream(e.html());
        insane = browserify([StringStream]);
      }
      return data;
    }
  };
  insanify = function(data, manglers_){
    var orig, p, i$;
    manglers_ == null && (manglers_ = manglers);
    orig = data;
    p = P.resolve(data);
    for (i$ in manglers_) {
      (fn$.call(this, i$, manglers_[i$]));
    }
    return p.then(function(data){
      if (data === orig) {
        return data;
      }
      return insanify(data, manglers);
    });
    function fn$(name, mangler){
      var p;
      console.log("PPPP", p);
      p = p.then(function(d){
        return mangler(d);
      });
    }
  };
  if (!module.parent) {
    sane = rw.readFileSync('/dev/stdin', 'utf-8');
    insanify(sane).then(function(insane){
      return rw.writeFileSync('/dev/stdout', insane);
    });
  }
}).call(this);
